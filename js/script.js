let grid = [];
let eraser = false;
let selected = "‚¨õ"
let tileImages = {};

function preload() {
    tileImages['‚¨õ'] = loadImage('img/wall/0.png');
    tileImages['1Ô∏è‚É£'] = loadImage('img/wall/1.png');
    tileImages['2Ô∏è‚É£'] = loadImage('img/wall/2.png');
    tileImages['3Ô∏è‚É£'] = loadImage('img/wall/3.png');
    tileImages['4Ô∏è‚É£'] = loadImage('img/wall/4.png');
    tileImages['5Ô∏è‚É£'] = loadImage('img/wall/5.png');
    tileImages['6Ô∏è‚É£'] = loadImage('img/wall/6.png');
    tileImages['7Ô∏è‚É£'] = loadImage('img/wall/7.png');
    tileImages['8Ô∏è‚É£'] = loadImage('img/wall/8.png');
    tileImages['9Ô∏è‚É£'] = loadImage('img/wall/9.png');
    tileImages['üîü'] = loadImage('img/wall/10.png');
    tileImages['‚¨ÜÔ∏è'] = loadImage('img/fire/up.png');
    tileImages['‚¨ÖÔ∏è'] = loadImage('img/fire/left.png');
    tileImages['‚û°Ô∏è'] = loadImage('img/fire/right.png');
    tileImages['‚¨áÔ∏è'] = loadImage('img/fire/down.png');
    tileImages['üü®'] = loadImage('img/yellow/door.png');
    tileImages['üü°'] = loadImage('img/yellow/button.png');
    tileImages['üíõ'] = loadImage('img/yellow/key.png');
    tileImages['üü•'] = loadImage('img/red/door.png');
    tileImages['üî¥'] = loadImage('img/red/button.png');
    tileImages['‚ù§Ô∏è'] = loadImage('img/red/key.png');
    tileImages['üü¶'] = loadImage('img/blue/door.png');
    tileImages['üîµ'] = loadImage('img/blue/button.png');
    tileImages['üíô'] = loadImage('img/blue/key.png');

}

function setup() {
    const canvas = createCanvas(400, 400);
    canvas.parent('editor');

    for (let i = 0; i < 16; i++) {
        grid.push([]);
        for (let j = 0; j < 16; j++) {
            grid[i].push('‚¨ú');
        }
    }
}

function draw() {
    background(220);

    for (let i = 0; i < 16; i++) {
        for (let j = 0; j < 16; j++) {
            noStroke();
            noSmooth();

            let tile = grid[j][i];
            let x = i * 25;
            let y = j * 25;

            if (tileImages[tile]) {
                image(tileImages[tile], x, y, 25, 25);
            } else {
                fill(255);
                rect(x, y, 25, 25);
            }
        }
    }

    let gx = int((mouseX - mouseX % 25) / 25);
    let gy = int((mouseY - mouseY % 25) / 25);

    if (gx > 15) gx = 15;
    if (gx < 0) gx = 0;
    if (gy > 15) gy = 15;
    if (gy < 0) gy = 0;

    if (mouseIsPressed) {
        if (eraser) grid[gy][gx] = '‚¨ú';
        else {
            if ((selected === 'üü®' || selected === 'üü•' || selected === 'üü¶') && (gy > 0 && grid[gy - 1][gx] !== '‚¨ú')) return;
            else if ((gy < 15 && grid[gy + 1][gx] === 'üü®') || (gy < 15 && grid[gy + 1][gx] === 'üü•') || (gy < 15 && grid[gy + 1][gx] === 'üü¶')) return;

            if (selected === '0Ô∏è‚É£') grid[gy][gx] = '0Ô∏è‚É£';
            else if (selected === '1Ô∏è‚É£') grid[gy][gx] = '1Ô∏è‚É£';
            else if (selected === '2Ô∏è‚É£') grid[gy][gx] = '2Ô∏è‚É£';
            else if (selected === '3Ô∏è‚É£') grid[gy][gx] = '3Ô∏è‚É£';
            else if (selected === '4Ô∏è‚É£') grid[gy][gx] = '4Ô∏è‚É£';
            else if (selected === '5Ô∏è‚É£') grid[gy][gx] = '5Ô∏è‚É£';
            else if (selected === '6Ô∏è‚É£') grid[gy][gx] = '6Ô∏è‚É£';
            else if (selected === '7Ô∏è‚É£') grid[gy][gx] = '7Ô∏è‚É£';
            else if (selected === '9Ô∏è‚É£') grid[gy][gx] = '9Ô∏è‚É£';
            else if (selected === 'üîü') grid[gy][gx] = 'üîü';
            else if (selected === '‚¨ÜÔ∏è') grid[gy][gx] = '‚¨ÜÔ∏è';
            else if (selected === '‚¨ÖÔ∏è') grid[gy][gx] = '‚¨ÖÔ∏è';
            else if (selected === '‚û°Ô∏è') grid[gy][gx] = '‚û°Ô∏è';
            else if (selected === '‚¨áÔ∏è') grid[gy][gx] = '‚¨áÔ∏è';
            else if (selected === 'üü®') grid[gy][gx] = 'üü®';
            else if (selected === 'üü°') grid[gy][gx] = 'üü°';
            else if (selected === 'üíõ') grid[gy][gx] = 'üíõ';
            else if (selected === 'üü•') grid[gy][gx] = 'üü•';
            else if (selected === 'üî¥') grid[gy][gx] = 'üî¥';
            else if (selected === '‚ù§Ô∏è') grid[gy][gx] = '‚ù§Ô∏è';
            else if (selected === 'üü¶') grid[gy][gx] = 'üü¶';
            else if (selected === 'üîµ') grid[gy][gx] = 'üîµ';
            else if (selected === 'üíô') grid[gy][gx] = 'üíô';
        }
    }

    if (eraser) fill(255, 255, 255, 100);
    else fill(0, 0, 0, 100);

    rect(gx * 25, gy * 25, 25, 25);
}

function setObject(value) {
    selected = value;
}

function toggleEraser() {
    eraser === true ? eraser = false : eraser = true;
}

function importRoom() {
    navigator.clipboard
    .readText()
    .then((clipboardData) => {
        const clipboardText = (clipboardData.toString())
            .replace(/‚¨ÜÔ∏è/g, "‚¨Ü")
            .replace(/‚¨ÖÔ∏è/g, "‚¨Ö")
            .replace(/‚û°Ô∏è/g, "‚û°")
            .replace(/‚¨áÔ∏è/g, "‚¨á")
            .replace(/1Ô∏è‚É£/g, "1")
            .replace(/2Ô∏è‚É£/g, "2")
            .replace(/3Ô∏è‚É£/g, "3")
            .replace(/4Ô∏è‚É£/g, "4")
            .replace(/5Ô∏è‚É£/g, "5")
            .replace(/6Ô∏è‚É£/g, "6")
            .replace(/7Ô∏è‚É£/g, "7")
            .replace(/8Ô∏è‚É£/g, "8")
            .replace(/9Ô∏è‚É£/g, "9");

        const rows = clipboardText.split('\n');
        // if (rows.length !== 16) return console.log('Invalid clipboard data: Expected 16 rows.');

        for (let i = 0; i < 16; i++) {
            const row = rows[i];
            // if (row.length !== 16) return console.log('Invalid clipboard data: Each row should have 16 characters.');

            for (let j = 0; j < 16; j++) {
                grid[i][j] = row.charAt(j)
                    .replace('‚¨Ü', "‚¨ÜÔ∏è")
                    .replace('‚¨Ö', "‚¨ÖÔ∏è")
                    .replace('‚û°', "‚û°Ô∏è")
                    .replace('‚¨á', "‚¨áÔ∏è")
                    .replace('1', "1Ô∏è‚É£")
                    .replace('2', "2Ô∏è‚É£")
                    .replace('3', "3Ô∏è‚É£")
                    .replace('4', "4Ô∏è‚É£")
                    .replace('5', "5Ô∏è‚É£")
                    .replace('6', "6Ô∏è‚É£")
                    .replace('7', "7Ô∏è‚É£")
                    .replace('8', "8Ô∏è‚É£")
                    .replace('9', "9Ô∏è‚É£");
            }
        }

        console.log('Data imported from clipboard successfully.');
    })
    .catch((error) => {
        console.log('Failed to read clipboard data:', error);
    });
}

function exportRoom() {
    output = '';

    for (let i = 0; i < 16; i++) {
        s = '';
        for (let j = 0; j < 16; j++) {
            s += grid[i][j];
        }

        output = output + s + '\n';
    }

    print(output);
    navigator.clipboard.writeText(output);
}